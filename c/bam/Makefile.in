CC = gcc

LIBHTS_CPPFLAGS = @LIBHTS_CPPFLAGS@
LIBHTS_LDFLAGS = @LIBHTS_LDFLAGS@
LIBHTS_LIBS = @LIBHTS_LIBS@
LIBHTS_LIB_DIR = @LIBHTS_LIB_DIR@

LIBCFU_CPPFLAGS = @LIBCFU_CPPFLAGS@
LIBCFU_LDFLAGS = @LIBCFU_LDFLAGS@
LIBCFU_LIBS = @LIBCFU_LIBS@
LIBCFU_LIB_DIR = @LIBCFU_LIB_DIR@

CFLAGS = -g -fPIC -pthread -O2 -Wall $(LIBHTS_CPPFLAGS) $(LIBCFU_CPPFLAGS)
LIB_FLAGS = -static-libgcc -shared -Wl,-rpath,$(LIBHTS_LIB_DIR),-soname,libBamM.so.0
LIBS =  -lm $(LIBCFU_LDFLAGS) $(LIBCFU_LIBS) $(LIBHTS_LDFLAGS) $(LIBHTS_LIBS)
EXECUTABLE = bamParser
BMM_BAM_LIB = libBamM.a

TEST_SOURCES = example.c bamParser.c pairedLink.c
LIB_SOURCES = bamParser.c pairedLink.c

LIBBAMM_OBJS = \
        bamParser.o \
        pairedLink.o

all: test library
        
.SUFFIXES: .c .o

.c.o:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

$(BMM_BAM_LIB) : $(LIBBAMM_OBJS)
	@-rm -f $@
	$(CC) $(CFLAGS) $(LIB_FLAGS) -o $@ $(LIB_SOURCES) $(LIBS)

$(EXECUTABLE): $(TEST_SOURCES)
	$(CC) $(CFLAGS) -o $@ $^ $(LIBS)

test: $(EXECUTABLE)

library: $(BMM_BAM_LIB)

clean:
	$(RM) $(EXECUTABLE)
	$(RM) *.o
	$(RM) $(BMM_BAM_LIB)
