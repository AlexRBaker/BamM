#!/usr/bin/python
###############################################################################
#                                                                             #
#    BamM.py                                                                  #
#                                                                             #
#    Get info from the BAM                                                    #
#                                                                             #
#    Copyright (C) Michael Imelfort                                           #
#                                                                             #
###############################################################################
#                                                                             #
#    This library is free software; you can redistribute it and/or            #
#    modify it under the terms of the GNU Lesser General Public               #
#    License as published by the Free Software Foundation; either             #
#    version 3.0 of the License, or (at your option) any later version.       #
#                                                                             #
#    This library is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU        #
#    Lesser General Public License for more details.                          #
#                                                                             #
#    You should have received a copy of the GNU Lesser General Public         #
#    License along with this library.                                         #
#                                                                             #
###############################################################################

__author__ = "Michael Imelfort"
__copyright__ = "Copyright 2014"
__credits__ = ["Michael Imelfort"]
__license__ = "LGPLv3"
__version__ = "0.2.2"
__maintainer__ = "Michael Imelfort"
__email__ = "mike@mikeimelfort.com"
__status__ = "Beta"

###############################################################################
###############################################################################
###############################################################################
###############################################################################

# system imports
import argparse
import sys

# local imports
from bamm.bamParser import BamParser
from bamm.bamMaker import BamMaker, BamScheduler
from bamm.bamExtractor import BamExtractor
from bamm.bammExceptions import *

###############################################################################
###############################################################################
###############################################################################
###############################################################################

def doWork( args ):
    """ Main wrapper"""
    if(args.subparser_name == 'make'):
        # The BamMaker class is able to take care of making fileNames etc
        # this outer wrapper is here to allow us to make multiple BAM files
        # in one go
        # making the class will take care of filenames and make sure that
        # all the parameters are set nicely
        try:
            BS = BamScheduler(args.database,
                              args.alignment_algorithm,
                              args.index_algorithm,
                              paired=args.coupled,
                              interleaved=args.interleaved,
                              singleEnded=args.single,
                              keptFiles=args.kept,
                              keepFiles=args.keep,
                              outputTam=args.output_tam,
                              numThreads=args.processes,
                              maxMemory=args.memory,
                              forceOverwriting=args.force
                              )
        except InvalidParameterSetException as e:
            printError(e)
            subparsers.choices['make'].print_help()
            sys.exit(1)

        # create indexes if required
        if(args.kept is False):
            BS.BMs[0].makeDatabase()

        # Now make the TAM/BAM file
        BS.makeBams()

        # clean up if we need to
        if args.keep is False and args.kept is False :
            BS.BMs[0].removeDatabase()

    elif(args.subparser_name == 'parse'):
        BP = BamParser(baseQuality=args.base_quality,
                       minLength=args.length,
                       mappingQuality=args.mapping_quality,
                       coverageMode=args.coverage_mode)

        # if called with no mode then just print types to stdout
        if (args.links == "") and (args.coverages == ""):
            doTypes = True
        else:
            doTypes = (args.types != "")

        ret = BP.parseBams(args.bamfiles,
                           doLinks=(args.links != ""),
                           doTypes=doTypes,
                           doCovs=(args.coverages != ""),
                           types=args.num_types,
                           threads=args.processes,
                           verbose=args.verbose)
        if ret == 0:
            # print nice stuff out as required
            if doTypes:
                BP.printBamTypes(args.types)
            if args.links != "":
                BP.printLinks(args.links)
            if args.coverages != "":
                BP.printCoverages(args.coverages)

    elif(args.subparser_name == 'extract'):
        try:
            BE = BamExtractor(args.targets,
                              args.bamfiles,
                              prefix=args.prefix,
                              outFolder=args.out_folder,
                              shuffle=args.shuffle,
                              mixBams=args.mix_bams,
                              ignoreUnpaired=args.ignore_unpaired,
                              bigFile=args.no_gzip,
                              headersOnly=args.headers_only)
        except InvalidParameterSetException as e:
            printError(e)
            subparsers.choices['extract'].print_help()
            sys.exit(1)

        BE.extract()

    else:
        printError("Unknown mode '%s'" % args.subparser_name)
        parser.print_help()
        sys.exit(1)

###############################################################################
###############################################################################
###############################################################################
###############################################################################

def printHelp():
    print '''\

              ...::: BamM :::...

    Working with the BAM, not against it...

   -----------------------------------------
                version: %s
   -----------------------------------------

    bamm make     ->  Make TAM/BAM files (sorted + indexed)
    bamm parse    ->  Get coverage profiles / linking reads / orientation types
    bamm extract  ->  Extract reads from BAM files

    USE: bamm OPTION -h to see detailed options
    ''' % __version__

if __name__ == '__main__':
    #-------------------------------------------------
    # intialise the options parser
    parser = argparse.ArgumentParser(add_help=False)
    subparsers = parser.add_subparsers(help="--", dest='subparser_name')

    #-------------------------------------------------
    # make a BAM file
    make_parser = subparsers.add_parser('make',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        help='make a TAM/BAM file (sorted + indexed)',
                                        description='make a TAM/BAM file (sorted + indexed)',
                                        epilog='''EXAMPLE: bamm make -d contigs.fa.gz -i reads1_shuffled.fq.gz reads2_shuffled.fq.gz -c reads3_1.fq.gz reads3_2.fq.gz -s reads4_singles.fq.gz -t 40
                                               will produce 4 sorted, indexed BAM files with reads mapped onto contigs.fa.gz using 40 threads''')

    make_parser.add_argument("-d", "--database", default=None, help="contigs to map onto (in fasta format)")
    make_parser.add_argument("-i", "--interleaved", nargs='+', default=[], help="map interleaved sequence files (as many as you like) EX: -i reads1_shuffled.fq.gz reads2_shuffled.fq.gz")
    make_parser.add_argument("-c", "--coupled", nargs='+', default=[], help="map paired sequence files (as many sets as you like) EX: -c reads1_1.fq.gz reads1_2.fq.gz reads2_1.fq.gz reads2_2.fq.gz")
    make_parser.add_argument("-s", "--single", nargs='+', default=[], help="map Single ended sequence files (as many as you like) EX: -s reads1_singles.fq.gz reads2_singles.fq.gz")

    make_parser.add_argument("--index_algorithm", default=None, help="algorithm bwa uses for indexing 'bwtsw' or 'is' [None for auto]")
    make_parser.add_argument("--alignment_algorithm", default="mem", help="algorithm bwa uses for alignment 'mem', 'bwasw' or 'aln'")

    make_parser.add_argument("-k", "--keep", action="store_true", default=False,
                           help="keep all the database index files etc after (see also --kept)")
    make_parser.add_argument("-K", "--kept", action="store_true", default=False,
                           help="assume the indices already exist, don't re-make them (and don't delete them) (e.g. previously this script was run with -k/--keep")
    make_parser.add_argument("-f", "--force", action="store_true", default=False,
                           help="force overwriting of index files if they are present")

    make_parser.add_argument("--output_tam", action="store_true", default=False, help="output TAM file instead of BAM file")

    make_parser.add_argument("-p", "--processes", type=int, default="1", help="number of threads to use where possible")
    make_parser.add_argument("-m", "--memory", type=int, default=None, help="amount of memory to use where possible (default 2GB*number of threads)")

    #-------------------------------------------------
    # determine linking reads
    parse_parser = subparsers.add_parser('parse',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        help='get bamfile type and/or coverage profiles and/or linking reads',
                                        description='get bamfile type and/or coverage profiles and/or linking reads')
    parse_parser.add_argument('bamfiles', nargs='+', help="bam files to parse")
    parse_parser.add_argument('-l', '--links', help="filename to write pairing links to", default="")
    parse_parser.add_argument('-c', '--coverages', help="filename to write coverage profiles to", default="")
    parse_parser.add_argument('-t', '--types', help="filename to write bamfile types to", default="")

    parse_parser.add_argument('-n', '--num_types', nargs='+', help="number of orientation types per BAM", type=int)
    parse_parser.add_argument('-m', '--coverage_mode', help="how to calculate coverage (requires --coverage)", default='vanilla', choices=['vanilla', 'outlier'])

    parse_parser.add_argument('-L', '--length', help="minimum Q length", type=int, default=50)
    parse_parser.add_argument('-q', '--base_quality', help="base quality threshold (Qscore)", type=int, default=20)
    parse_parser.add_argument('-Q', '--mapping_quality', help="mapping quality threshold", type=int, default=0)

    parse_parser.add_argument('-v', '--verbose', action="store_true", default=False, help="be verbose")
    parse_parser.add_argument('-p', '--processes', help="number of threads to use", type=int, default=1)

    #-------------------------------------------------
    # read extractor
    extract_parser = subparsers.add_parser('extract',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        help='extract reads from bamfile(s)',
                                        description='Extract reads which hit the given references')
    extract_parser.add_argument('targets', help="file containing reference names (1 per line) or contigs file in fasta format")
    extract_parser.add_argument('bamfiles', nargs='+', help="bam files to parse")

    extract_parser.add_argument('-p', '--prefix', default="", help="prefix to apply to output files")
    extract_parser.add_argument('-o', '--out_folder', default=".", help="write to this folder (None for current dir)")

    extract_parser.add_argument('-s', '--shuffle', action="store_true", default=False, help="shuffle paired reads in ouput files")
    extract_parser.add_argument('-i', '--ignore_unpaired', action="store_true", default=False, help="ignore unpaired reads")
    extract_parser.add_argument('-m', '--mix_bams', action="store_true", default=False, help="use the same file for all reads")
    extract_parser.add_argument('-c', '--combine_reads', action="store_true", default=False, help="write paired and unpaired to the same files")

    extract_parser.add_argument('--no_gzip', action="store_true", default=False, help="do not gzip output files")
    extract_parser.add_argument('--headers_only', action="store_true", default=False, help="extract only (unique) headers")

    #-------------------------------------------------
    # get and check options
    args = None
    if(len(sys.argv) == 1):
        printHelp()
        sys.exit(0)
    elif(sys.argv[1] == '-v' or sys.argv[1] == '--version'):
        print "BamM: version %s %s %s" % (__version__, __copyright__, __author__)
        sys.exit(0)
    elif(sys.argv[1] == '-h' or sys.argv[1] == '--help'):
        printHelp()
        sys.exit(0)
    else:
        args = parser.parse_args()

    # profiling happens here. If you'd like to track the speed your code runs at
    # then set the following to True and voila!
    if(False):
        import cProfile
        cProfile.run('doWork(args)', 'profile')
        ##########################################
        ##########################################
        # Use this in python console!
        #import pstats
        #p = pstats.Stats('prof')
        #p.sort_stats('cumulative').print_stats(10)
        #p.sort_stats('time').print_stats(10)
        ##########################################
        ##########################################
    else:
        doWork(args)

###############################################################################
###############################################################################
###############################################################################
###############################################################################

